# @title 17-4-25_lab-5
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import BernoulliRBM
from keras.models import Sequential
from keras.layers import Dense
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, r2_score


url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"
data = pd.read_csv(url, delimiter=";")

X = data.drop('quality', axis=1).values
y = data['quality'].values

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)


rbm1 = BernoulliRBM(n_components=128, learning_rate=0.1, n_iter=10, random_state=42)
X_train_rbm1 = rbm1.fit_transform(X_train)

rbm2 = BernoulliRBM(n_components=64, learning_rate=0.1, n_iter=10, random_state=42)
X_train_rbm2 = rbm2.fit_transform(X_train_rbm1)

model_dbn = Sequential()
model_dbn.add(Dense(64, input_dim=64, activation='relu'))
model_dbn.add(Dense(32, activation='relu'))
model_dbn.add(Dense(1, activation='linear'))

model_dbn.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_squared_error'])
model_dbn.fit(X_train_rbm2, y_train, epochs=10, batch_size=128)

X_test_rbm1 = rbm1.transform(X_test)
X_test_rbm2 = rbm2.transform(X_test_rbm1)
_, test_mse = model_dbn.evaluate(X_test_rbm2, y_test)
print(f"Test MSE for DBN: {test_mse:.2f}")


mlp = MLPRegressor(hidden_layer_sizes=(64, 32), max_iter=10, random_state=42)
mlp.fit(X_train, y_train)

y_pred_mlp = mlp.predict(X_test)
mse_mlp = mean_squared_error(y_test, y_pred_mlp)
r2_mlp = r2_score(y_test, y_pred_mlp)

print(f"Test MSE for traditional DNN: {mse_mlp:.2f}")
print(f"R² for traditional DNN: {r2_mlp:.2f}")

plt.figure(figsize=(12, 5))
for i in range(10):
    image = rbm1.components_[i].reshape(1, -1)
    plt.subplot(2, 5, i + 1)
    plt.imshow(image, cmap='viridis', aspect='auto')
    plt.axis('off')

plt.suptitle("RBM1 Learned Features as Heatmaps (1x11)")
plt.tight_layout()
plt.show()

print("\nComparison of performance:")
print(f"DBN MSE: {test_mse:.2f}")
print(f"Traditional DNN MSE: {mse_mlp:.2f}")
print(f"Traditional DNN R²: {r2_mlp:.2f}")
