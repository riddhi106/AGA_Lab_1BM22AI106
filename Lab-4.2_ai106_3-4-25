import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.preprocessing import StandardScaler
from sklearn.neural_network import BernoulliRBM
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# Load MNIST dataset
mnist = fetch_openml('mnist_784', version=1, as_frame=False)
data = mnist['data'] / 255.0  # Normalize to [0,1]
labels = mnist['target'].astype(int)

# Split into train and test sets
X_train, X_test = data[:60000], data[60000:]

# Step 1: Train RBM layers
rbm_1 = BernoulliRBM(n_components=512, learning_rate=0.01, batch_size=256, n_iter=10, verbose=1)
rbm_2 = BernoulliRBM(n_components=256, learning_rate=0.01, batch_size=256, n_iter=10, verbose=1)
rbm_3 = BernoulliRBM(n_components=128, learning_rate=0.01, batch_size=256, n_iter=10, verbose=1)

print("Training RBM 1...")
rbm_1.fit(X_train)
X_train_rbm1 = rbm_1.transform(X_train)
X_test_rbm1 = rbm_1.transform(X_test)

print("Training RBM 2...")
rbm_2.fit(X_train_rbm1)
X_train_rbm2 = rbm_2.transform(X_train_rbm1)
X_test_rbm2 = rbm_2.transform(X_test_rbm1)

print("Training RBM 3...")
rbm_3.fit(X_train_rbm2)
X_train_rbm3 = rbm_3.transform(X_train_rbm2)
X_test_rbm3 = rbm_3.transform(X_test_rbm2)

# Step 2: Build Stacked Autoencoder (Encoder + Decoder)
encoder = keras.Sequential([
    layers.InputLayer(input_shape=(784,)),
    layers.Dense(512, activation='relu', trainable=True),
    layers.Dense(256, activation='relu', trainable=True),
    layers.Dense(128, activation='relu', trainable=True)
])

decoder = keras.Sequential([
    layers.Dense(256, activation='relu'),
    layers.Dense(512, activation='relu'),
    layers.Dense(784, activation='sigmoid')
])

autoencoder = keras.Sequential([encoder, decoder])

# Step 3: Compile and Train Autoencoder
autoencoder.compile(optimizer='adam', loss='mse')
autoencoder.fit(X_train, X_train, epochs=50, batch_size=256, validation_data=(X_test, X_test))

# Step 4: Evaluate Reconstruction
reconstructed_images = autoencoder.predict(X_test[:10])

plt.figure(figsize=(10, 5))
for i in range(10):
    plt.subplot(2, 10, i+1)
    plt.imshow(X_test[i].reshape(28, 28), cmap='gray')
    plt.axis('off')
    
    plt.subplot(2, 10, i+11)
    plt.imshow(reconstructed_images[i].reshape(28, 28), cmap='gray')
    plt.axis('off')
plt.show()
